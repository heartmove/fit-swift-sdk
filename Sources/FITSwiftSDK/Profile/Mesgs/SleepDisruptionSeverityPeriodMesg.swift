/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.178.0Release
// Tag = production/release/21.178.0-0-g3bea629
/////////////////////////////////////////////////////////////////////////////////////////////


open class SleepDisruptionSeverityPeriodMesg : Mesg {
    public static let messageIndexFieldNum:UInt8 = 254
    public static let timestampFieldNum:UInt8 = 253
    public static let severityFieldNum:UInt8 = 0

	public init() {
        super.init(mesg: SleepDisruptionSeverityPeriodMesg.createSleepDisruptionSeverityPeriodMesg())
    }

    public override init(mesg: Mesg) {
        super.init(mesg: mesg)
    }

    fileprivate override init(name: String, num: UInt16) {
        super.init(name: name, num: num)
    }

	public func getMessageIndex() -> MessageIndex? {
		guard let value = getFieldValue(fieldNum: SleepDisruptionSeverityPeriodMesg.messageIndexFieldNum, index:0) as? UInt16 else {
            return nil
        }
		return value
	}

	public func setMessageIndex(_ value: MessageIndex) throws {
		try setFieldValue(fieldNum: SleepDisruptionSeverityPeriodMesg.messageIndexFieldNum, value: value)
	}

	public func getTimestamp() -> DateTime? {
		guard let value = getFieldValue(fieldNum: SleepDisruptionSeverityPeriodMesg.timestampFieldNum, index:0) as? UInt32 else {
            return nil
        }
		return DateTime(timestamp: value)
	}

	public func setTimestamp(_ value: DateTime) throws {
		try setFieldValue(fieldNum: SleepDisruptionSeverityPeriodMesg.timestampFieldNum, value: value.timestamp)
	}

	public func getSeverity() -> SleepDisruptionSeverity? {
		guard let value = getFieldValue(fieldNum: SleepDisruptionSeverityPeriodMesg.severityFieldNum, index:0) as? UInt8 else {
            return nil
        }
		return SleepDisruptionSeverity(rawValue: value) ?? .invalid
	}

	public func setSeverity(_ value: SleepDisruptionSeverity) throws {
		try setFieldValue(fieldNum: SleepDisruptionSeverityPeriodMesg.severityFieldNum, value: value.rawValue)
	}

	public class func createSleepDisruptionSeverityPeriodMesg() -> SleepDisruptionSeverityPeriodMesg {
        let mesg = SleepDisruptionSeverityPeriodMesg(name: "SleepDisruptionSeverityPeriod", num: Profile.MesgNum.sleepDisruptionSeverityPeriod)
		
		mesg.fields[SleepDisruptionSeverityPeriodMesg.messageIndexFieldNum] = Field(name: "MessageIndex", num: SleepDisruptionSeverityPeriodMesg.messageIndexFieldNum, type: BaseType.UINT16.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SleepDisruptionSeverityPeriodMesg.timestampFieldNum] = Field(name: "Timestamp", num: SleepDisruptionSeverityPeriodMesg.timestampFieldNum, type: BaseType.UINT32.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
		mesg.fields[SleepDisruptionSeverityPeriodMesg.severityFieldNum] = Field(name: "Severity", num: SleepDisruptionSeverityPeriodMesg.severityFieldNum, type: BaseType.ENUM.rawValue, scale: 1, offset: 0, units: "", accumulated: false)
        return mesg
    }
}